
XPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040f  00800060  00800060  00000660  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c4  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a17  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbc  00000000  00000000  000026e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  000032a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d98  00000000  00000000  00003c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 02 	call	0x5cc	; 0x5cc <main>
  8a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enc_init>:

 int8_t enc_value;

 void enc_init()
 {
	 ENC_PORT |= ENC_PIN_B;
  92:	92 9a       	sbi	0x12, 2	; 18
	 ENC_PORT |= ENC_PIN_A;
  94:	93 9a       	sbi	0x12, 3	; 18

	 GICR |= ENC_INTERRUPT;
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
	 MCUCR |= (1 << ISC00);
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bf       	out	0x35, r24	; 53

	 sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <__vector_1>:
 }

ISR( INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	static uint8_t dir;

	if(!(ENC_PIN & ENC_PIN_B))
  b4:	82 99       	sbic	0x10, 2	; 16
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__vector_1+0x1c>
	{
		dir = (ENC_PIN & ENC_PIN_A);
  b8:	80 b3       	in	r24, 0x10	; 16
  ba:	88 70       	andi	r24, 0x08	; 8
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
  c0:	13 c0       	rjmp	.+38     	; 0xe8 <__vector_1+0x42>
	}
	else
	{
		if(dir != (ENC_PIN & ENC_PIN_A))
  c2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_end>
  c6:	80 b3       	in	r24, 0x10	; 16
  c8:	88 70       	andi	r24, 0x08	; 8
  ca:	89 17       	cp	r24, r25
  cc:	69 f0       	breq	.+26     	; 0xe8 <__vector_1+0x42>
		{
			if(dir)
  ce:	99 23       	and	r25, r25
  d0:	31 f0       	breq	.+12     	; 0xde <__vector_1+0x38>
			{
				enc_value++;
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_1+0x42>
			}
			else
			{
				enc_value--;
  de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
			}
		}
	}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <game_reset>:
	right_player_paddle.previous_position = right_player_paddle.position;
}

void game_draw_static_graphic()
{
	game_draw_borders();
  f6:	e8 e6       	ldi	r30, 0x68	; 104
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	82 83       	std	Z+2, r24	; 0x02
 106:	8e ef       	ldi	r24, 0xFE	; 254
 108:	83 83       	std	Z+3, r24	; 0x03
 10a:	8c e1       	ldi	r24, 0x1C	; 28
 10c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <left_player_paddle+0x1>
 110:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <right_player_paddle+0x1>
 114:	08 95       	ret

00000116 <game_update>:
 116:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ball>
 11a:	9f ed       	ldi	r25, 0xDF	; 223
 11c:	98 0f       	add	r25, r24
 11e:	9f 33       	cpi	r25, 0x3F	; 63
 120:	28 f0       	brcs	.+10     	; 0x12c <game_update+0x16>
 122:	e8 e6       	ldi	r30, 0x68	; 104
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	92 81       	ldd	r25, Z+2	; 0x02
 128:	91 95       	neg	r25
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 34       	cpi	r24, 0x41	; 65
 12e:	88 f1       	brcs	.+98     	; 0x192 <game_update+0x7c>
 130:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ball+0x1>
 134:	94 50       	subi	r25, 0x04	; 4
 136:	29 2f       	mov	r18, r25
 138:	09 2e       	mov	r0, r25
 13a:	00 0c       	add	r0, r0
 13c:	33 0b       	sbc	r19, r19
 13e:	27 5f       	subi	r18, 0xF7	; 247
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	21 34       	cpi	r18, 0x41	; 65
 144:	31 05       	cpc	r19, r1
 146:	24 f4       	brge	.+8      	; 0x150 <game_update+0x3a>
 148:	99 23       	and	r25, r25
 14a:	1c f4       	brge	.+6      	; 0x152 <game_update+0x3c>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 c0       	rjmp	.+2      	; 0x152 <game_update+0x3c>
 150:	97 e3       	ldi	r25, 0x37	; 55
 152:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <right_player_paddle+0x1>
 156:	92 1b       	sub	r25, r18
 158:	19 16       	cp	r1, r25
 15a:	6c f4       	brge	.+26     	; 0x176 <game_update+0x60>
 15c:	93 31       	cpi	r25, 0x13	; 19
 15e:	24 f4       	brge	.+8      	; 0x168 <game_update+0x52>
 160:	9a 30       	cpi	r25, 0x0A	; 10
 162:	24 f4       	brge	.+8      	; 0x16c <game_update+0x56>
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	03 c0       	rjmp	.+6      	; 0x16e <game_update+0x58>
 168:	99 e0       	ldi	r25, 0x09	; 9
 16a:	01 c0       	rjmp	.+2      	; 0x16e <game_update+0x58>
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	29 0f       	add	r18, r25
 170:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <right_player_paddle+0x1>
 174:	0e c0       	rjmp	.+28     	; 0x192 <game_update+0x7c>
 176:	99 23       	and	r25, r25
 178:	64 f4       	brge	.+24     	; 0x192 <game_update+0x7c>
 17a:	93 31       	cpi	r25, 0x13	; 19
 17c:	24 f4       	brge	.+8      	; 0x186 <game_update+0x70>
 17e:	9a 30       	cpi	r25, 0x0A	; 10
 180:	24 f4       	brge	.+8      	; 0x18a <game_update+0x74>
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	03 c0       	rjmp	.+6      	; 0x18c <game_update+0x76>
 186:	99 e0       	ldi	r25, 0x09	; 9
 188:	01 c0       	rjmp	.+2      	; 0x18c <game_update+0x76>
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	29 1b       	sub	r18, r25
 18e:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <right_player_paddle+0x1>
 192:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <enc_value>
 196:	29 2f       	mov	r18, r25
 198:	09 2e       	mov	r0, r25
 19a:	00 0c       	add	r0, r0
 19c:	33 0b       	sbc	r19, r19
 19e:	27 5f       	subi	r18, 0xF7	; 247
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	21 34       	cpi	r18, 0x41	; 65
 1a4:	31 05       	cpc	r19, r1
 1a6:	24 f0       	brlt	.+8      	; 0x1b0 <game_update+0x9a>
 1a8:	97 e3       	ldi	r25, 0x37	; 55
 1aa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <enc_value>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <game_update+0xa4>
 1b0:	99 23       	and	r25, r25
 1b2:	1c f4       	brge	.+6      	; 0x1ba <game_update+0xa4>
 1b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <enc_value>
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <left_player_paddle+0x1>
 1be:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ball+0x1>
 1c2:	2d ef       	ldi	r18, 0xFD	; 253
 1c4:	29 0f       	add	r18, r25
 1c6:	2b 33       	cpi	r18, 0x3B	; 59
 1c8:	28 f0       	brcs	.+10     	; 0x1d4 <game_update+0xbe>
 1ca:	e8 e6       	ldi	r30, 0x68	; 104
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	23 81       	ldd	r18, Z+3	; 0x03
 1d0:	21 95       	neg	r18
 1d2:	23 83       	std	Z+3, r18	; 0x03
 1d4:	e8 e6       	ldi	r30, 0x68	; 104
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	22 81       	ldd	r18, Z+2	; 0x02
 1da:	82 0f       	add	r24, r18
 1dc:	80 83       	st	Z, r24
 1de:	83 81       	ldd	r24, Z+3	; 0x03
 1e0:	98 0f       	add	r25, r24
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	08 95       	ret

000001e6 <game_clear_ball>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	c8 e6       	ldi	r28, 0x68	; 104
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	69 81       	ldd	r22, Y+1	; 0x01
 1f0:	61 50       	subi	r22, 0x01	; 1
 1f2:	88 81       	ld	r24, Y
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 1fa:	88 81       	ld	r24, Y
 1fc:	69 81       	ldd	r22, Y+1	; 0x01
 1fe:	81 50       	subi	r24, 0x01	; 1
 200:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 204:	69 81       	ldd	r22, Y+1	; 0x01
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	88 81       	ld	r24, Y
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 210:	69 81       	ldd	r22, Y+1	; 0x01
 212:	61 50       	subi	r22, 0x01	; 1
 214:	88 81       	ld	r24, Y
 216:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 21a:	69 81       	ldd	r22, Y+1	; 0x01
 21c:	88 81       	ld	r24, Y
 21e:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 222:	69 81       	ldd	r22, Y+1	; 0x01
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	88 81       	ld	r24, Y
 228:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 22c:	69 81       	ldd	r22, Y+1	; 0x01
 22e:	61 50       	subi	r22, 0x01	; 1
 230:	88 81       	ld	r24, Y
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 238:	88 81       	ld	r24, Y
 23a:	69 81       	ldd	r22, Y+1	; 0x01
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 242:	69 81       	ldd	r22, Y+1	; 0x01
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	88 81       	ld	r24, Y
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <game_clear_paddles>:
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	0f 2e       	mov	r0, r31
 262:	f2 e6       	ldi	r31, 0x62	; 98
 264:	ef 2e       	mov	r14, r31
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ff 2e       	mov	r15, r31
 26a:	f0 2d       	mov	r31, r0
 26c:	05 e6       	ldi	r16, 0x65	; 101
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	f7 01       	movw	r30, r14
 272:	60 81       	ld	r22, Z
 274:	6c 0f       	add	r22, r28
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 27c:	f8 01       	movw	r30, r16
 27e:	60 81       	ld	r22, Z
 280:	6c 0f       	add	r22, r28
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 288:	f7 01       	movw	r30, r14
 28a:	60 81       	ld	r22, Z
 28c:	6c 0f       	add	r22, r28
 28e:	81 e2       	ldi	r24, 0x21	; 33
 290:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 294:	f8 01       	movw	r30, r16
 296:	60 81       	ld	r22, Z
 298:	6c 0f       	add	r22, r28
 29a:	8f e5       	ldi	r24, 0x5F	; 95
 29c:	0e 94 bc 02 	call	0x578	; 0x578 <glcd_clear_pixel>
 2a0:	cf 5f       	subi	r28, 0xFF	; 255
 2a2:	c9 30       	cpi	r28, 0x09	; 9
 2a4:	29 f7       	brne	.-54     	; 0x270 <game_clear_paddles+0x1c>
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	08 95       	ret

000002b2 <game_draw_ball>:
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	c8 e6       	ldi	r28, 0x68	; 104
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	69 81       	ldd	r22, Y+1	; 0x01
 2bc:	61 50       	subi	r22, 0x01	; 1
 2be:	88 81       	ld	r24, Y
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 2c6:	88 81       	ld	r24, Y
 2c8:	69 81       	ldd	r22, Y+1	; 0x01
 2ca:	81 50       	subi	r24, 0x01	; 1
 2cc:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 2d0:	69 81       	ldd	r22, Y+1	; 0x01
 2d2:	6f 5f       	subi	r22, 0xFF	; 255
 2d4:	88 81       	ld	r24, Y
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 2dc:	69 81       	ldd	r22, Y+1	; 0x01
 2de:	61 50       	subi	r22, 0x01	; 1
 2e0:	88 81       	ld	r24, Y
 2e2:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 2e6:	69 81       	ldd	r22, Y+1	; 0x01
 2e8:	88 81       	ld	r24, Y
 2ea:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 2ee:	69 81       	ldd	r22, Y+1	; 0x01
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	88 81       	ld	r24, Y
 2f4:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 2f8:	69 81       	ldd	r22, Y+1	; 0x01
 2fa:	61 50       	subi	r22, 0x01	; 1
 2fc:	88 81       	ld	r24, Y
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 304:	88 81       	ld	r24, Y
 306:	69 81       	ldd	r22, Y+1	; 0x01
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 30e:	69 81       	ldd	r22, Y+1	; 0x01
 310:	6f 5f       	subi	r22, 0xFF	; 255
 312:	88 81       	ld	r24, Y
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <game_draw_paddles>:
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	0f 2e       	mov	r0, r31
 32e:	f2 e6       	ldi	r31, 0x62	; 98
 330:	ef 2e       	mov	r14, r31
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ff 2e       	mov	r15, r31
 336:	f0 2d       	mov	r31, r0
 338:	05 e6       	ldi	r16, 0x65	; 101
 33a:	10 e0       	ldi	r17, 0x00	; 0
 33c:	f7 01       	movw	r30, r14
 33e:	61 81       	ldd	r22, Z+1	; 0x01
 340:	6c 0f       	add	r22, r28
 342:	80 e2       	ldi	r24, 0x20	; 32
 344:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 348:	f8 01       	movw	r30, r16
 34a:	61 81       	ldd	r22, Z+1	; 0x01
 34c:	6c 0f       	add	r22, r28
 34e:	80 e6       	ldi	r24, 0x60	; 96
 350:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 354:	f7 01       	movw	r30, r14
 356:	61 81       	ldd	r22, Z+1	; 0x01
 358:	6c 0f       	add	r22, r28
 35a:	81 e2       	ldi	r24, 0x21	; 33
 35c:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 360:	f8 01       	movw	r30, r16
 362:	61 81       	ldd	r22, Z+1	; 0x01
 364:	6c 0f       	add	r22, r28
 366:	8f e5       	ldi	r24, 0x5F	; 95
 368:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 36c:	cf 5f       	subi	r28, 0xFF	; 255
 36e:	c9 30       	cpi	r28, 0x09	; 9
 370:	29 f7       	brne	.-54     	; 0x33c <game_draw_paddles+0x1c>
 372:	e2 e6       	ldi	r30, 0x62	; 98
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	81 81       	ldd	r24, Z+1	; 0x01
 378:	80 83       	st	Z, r24
 37a:	e5 e6       	ldi	r30, 0x65	; 101
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	81 81       	ldd	r24, Z+1	; 0x01
 380:	80 83       	st	Z, r24
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	08 95       	ret

0000038e <game_loop>:
 38e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <game_clear_ball>
 392:	0e 94 2a 01 	call	0x254	; 0x254 <game_clear_paddles>
 396:	0e 94 8b 00 	call	0x116	; 0x116 <game_update>
 39a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <game_draw_ball>
 39e:	0e 94 90 01 	call	0x320	; 0x320 <game_draw_paddles>
 3a2:	08 95       	ret

000003a4 <game_draw_borders>:
 3a4:	cf 93       	push	r28
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
 3a8:	6c 2f       	mov	r22, r28
 3aa:	8e e1       	ldi	r24, 0x1E	; 30
 3ac:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 3b0:	6c 2f       	mov	r22, r28
 3b2:	82 e6       	ldi	r24, 0x62	; 98
 3b4:	0e 94 93 02 	call	0x526	; 0x526 <glcd_set_pixel>
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
 3ba:	c0 34       	cpi	r28, 0x40	; 64
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <game_draw_borders+0x4>
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <game_init>:
///		PROCEDURES
//////////////////////////////////////////////////////////////////////////

void game_init() 
{
	game_reset();
 3c2:	0e 94 7b 00 	call	0xf6	; 0xf6 <game_reset>

	glcd_init();
 3c6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <glcd_init>
	right_player_paddle.previous_position = right_player_paddle.position;
}

void game_draw_static_graphic()
{
	game_draw_borders();
 3ca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <game_draw_borders>
	game_reset();

	glcd_init();
	game_draw_static_graphic();

	enc_init();
 3ce:	0e 94 49 00 	call	0x92	; 0x92 <enc_init>
	enc_value = PADDLE_START_POSITION;
 3d2:	8c e1       	ldi	r24, 0x1C	; 28
 3d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
 3d8:	08 95       	ret

000003da <glcd_enable_controller>:
 void glcd_clear_all()
 {
	glcd_enable_mirroring_controllers();
	glcd_clear();
	glcd_enable_controller(0);
	clear_screen_data();
 3da:	88 23       	and	r24, r24
 3dc:	31 f0       	breq	.+12     	; 0x3ea <glcd_enable_controller+0x10>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <enabled_controller>
 3e4:	da 98       	cbi	0x1b, 2	; 27
 3e6:	db 9a       	sbi	0x1b, 3	; 27
 3e8:	08 95       	ret
 3ea:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <enabled_controller>
 3ee:	db 98       	cbi	0x1b, 3	; 27
 3f0:	da 9a       	sbi	0x1b, 2	; 27
 3f2:	08 95       	ret

000003f4 <glcd_command>:
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	94 bb       	out	0x14, r25	; 20
 3f8:	d8 9a       	sbi	0x1b, 0	; 27
 3fa:	9a e1       	ldi	r25, 0x1A	; 26
 3fc:	9a 95       	dec	r25
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <glcd_command+0x8>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	85 bb       	out	0x15, r24	; 21
 404:	d8 98       	cbi	0x1b, 0	; 27
 406:	8a e1       	ldi	r24, 0x1A	; 26
 408:	8a 95       	dec	r24
 40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	08 95       	ret

00000410 <glcd_enable_mirroring_controllers>:
 410:	8b b3       	in	r24, 0x1b	; 27
 412:	83 7f       	andi	r24, 0xF3	; 243
 414:	8b bb       	out	0x1b, r24	; 27
 416:	08 95       	ret

00000418 <glcd_write_data>:
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
 41c:	d9 9a       	sbi	0x1b, 1	; 27
 41e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
 422:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <glcd_y>
 426:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <enabled_controller>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	2f 5f       	subi	r18, 0xFF	; 255
 42e:	3f 4f       	sbci	r19, 0xFF	; 255
 430:	82 9f       	mul	r24, r18
 432:	f0 01       	movw	r30, r0
 434:	83 9f       	mul	r24, r19
 436:	f0 0d       	add	r31, r0
 438:	11 24       	eor	r1, r1
 43a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <glcd_x>
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	e3 59       	subi	r30, 0x93	; 147
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	e9 0f       	add	r30, r25
 450:	f1 1d       	adc	r31, r1
 452:	c0 83       	st	Z, r28
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	8f 73       	andi	r24, 0x3F	; 63
 458:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 45c:	d9 98       	cbi	0x1b, 1	; 27
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <glcd_clear>:
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	80 e4       	ldi	r24, 0x40	; 64
 46a:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 46e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	81 2f       	mov	r24, r17
 476:	88 6b       	ori	r24, 0xB8	; 184
 478:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 47c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
 480:	c0 e4       	ldi	r28, 0x40	; 64
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 0c 02 	call	0x418	; 0x418 <glcd_write_data>
 48a:	21 97       	sbiw	r28, 0x01	; 1
 48c:	d9 f7       	brne	.-10     	; 0x484 <glcd_clear+0x22>
 48e:	1f 5f       	subi	r17, 0xFF	; 255
 490:	18 30       	cpi	r17, 0x08	; 8
 492:	81 f7       	brne	.-32     	; 0x474 <glcd_clear+0x12>
 494:	88 eb       	ldi	r24, 0xB8	; 184
 496:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 49a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	08 95       	ret

000004a6 <glcd_init>:
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	84 bb       	out	0x14, r24	; 20
 4aa:	8a b3       	in	r24, 0x1a	; 26
 4ac:	8f 60       	ori	r24, 0x0F	; 15
 4ae:	8a bb       	out	0x1a, r24	; 26
 4b0:	0e 94 08 02 	call	0x410	; 0x410 <glcd_enable_mirroring_controllers>
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
 4c0:	0e 94 31 02 	call	0x462	; 0x462 <glcd_clear>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 ed 01 	call	0x3da	; 0x3da <glcd_enable_controller>
 4ca:	08 95       	ret

000004cc <glcd_set_y>:
//////////////////////////////////////////////////////////////////////////
////////COMMANDS
//////////////////////////////////////////////////////////////////////////

void glcd_set_y(uint8_t y)
{
 4cc:	cf 93       	push	r28
 4ce:	c8 2f       	mov	r28, r24
	glcd_command(SET_Y(y));
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 4d6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
	glcd_y = y;
 4da:	c0 93 6d 04 	sts	0x046D, r28	; 0x80046d <glcd_y>
}
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <glcd_set_x>:

void glcd_set_x(uint8_t x)
{
 4e2:	cf 93       	push	r28
 4e4:	c8 2f       	mov	r28, r24
	glcd_command(SET_X(x));
 4e6:	88 6b       	ori	r24, 0xB8	; 184
 4e8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 4ec:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <glcd_command>
	glcd_x = x;
 4f0:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <glcd_x>
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <glcd_set_cursor>:

	controller_port &= ~RS;
 }

 void glcd_set_cursor(uint8_t x, uint8_t y)
 {
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	c8 2f       	mov	r28, r24
 4fe:	d6 2f       	mov	r29, r22
	uint8_t row = y/BITS_IN_BYTE;
	uint8_t column = x % SINGLE_CONTROLLER_SCREEN_WIDTH;
	uint8_t controller = x/SINGLE_CONTROLLER_SCREEN_WIDTH;

	glcd_enable_controller(controller);
 500:	82 95       	swap	r24
 502:	86 95       	lsr	r24
 504:	86 95       	lsr	r24
 506:	83 70       	andi	r24, 0x03	; 3
 508:	0e 94 ed 01 	call	0x3da	; 0x3da <glcd_enable_controller>
	glcd_set_x(row);
 50c:	8d 2f       	mov	r24, r29
 50e:	86 95       	lsr	r24
 510:	86 95       	lsr	r24
 512:	86 95       	lsr	r24
 514:	0e 94 71 02 	call	0x4e2	; 0x4e2 <glcd_set_x>
	glcd_set_y(column);
 518:	8c 2f       	mov	r24, r28
 51a:	8f 73       	andi	r24, 0x3F	; 63
 51c:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_y>
 }
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <glcd_set_pixel>:

 void glcd_set_pixel(uint8_t x, uint8_t y)
 {
 526:	cf 93       	push	r28
 528:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 52a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] | 1 << pixel;
 52e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <enabled_controller>
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <glcd_y>
 53a:	28 9f       	mul	r18, r24
 53c:	f0 01       	movw	r30, r0
 53e:	29 9f       	mul	r18, r25
 540:	f0 0d       	add	r31, r0
 542:	11 24       	eor	r1, r1
 544:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <glcd_x>
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	e3 59       	subi	r30, 0x93	; 147
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	e8 0f       	add	r30, r24
 55a:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 55c:	c7 70       	andi	r28, 0x07	; 7
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <glcd_set_pixel+0x42>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	ca 95       	dec	r28
 56a:	e2 f7       	brpl	.-8      	; 0x564 <glcd_set_pixel+0x3e>
 56c:	90 81       	ld	r25, Z
 56e:	89 2b       	or	r24, r25
 570:	0e 94 0c 02 	call	0x418	; 0x418 <glcd_write_data>
 }
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <glcd_clear_pixel>:

 void glcd_clear_pixel(uint8_t x, uint8_t y)
 {
 578:	cf 93       	push	r28
 57a:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 57c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] & ~(1 << pixel);
 580:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <enabled_controller>
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <glcd_y>
 58c:	28 9f       	mul	r18, r24
 58e:	f0 01       	movw	r30, r0
 590:	29 9f       	mul	r18, r25
 592:	f0 0d       	add	r31, r0
 594:	11 24       	eor	r1, r1
 596:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <glcd_x>
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	e3 59       	subi	r30, 0x93	; 147
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	e8 0f       	add	r30, r24
 5ac:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 5ae:	c7 70       	andi	r28, 0x07	; 7
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <glcd_clear_pixel+0x42>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	ca 95       	dec	r28
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <glcd_clear_pixel+0x3e>
 5be:	80 95       	com	r24
 5c0:	90 81       	ld	r25, Z
 5c2:	89 23       	and	r24, r25
 5c4:	0e 94 0c 02 	call	0x418	; 0x418 <glcd_write_data>
 }
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <main>:
{
	
	uint8_t actual_controller = 0;
	uint8_t should_clear = 0;

	game_init();
 5cc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <game_init>
    while (1) 
    {
		game_loop();
 5d0:	0e 94 c7 01 	call	0x38e	; 0x38e <game_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	89 e6       	ldi	r24, 0x69	; 105
 5d8:	98 e1       	ldi	r25, 0x18	; 24
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0xe>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x18>
 5e4:	00 00       	nop
 5e6:	f4 cf       	rjmp	.-24     	; 0x5d0 <main+0x4>

000005e8 <_exit>:
 5e8:	f8 94       	cli

000005ea <__stop_program>:
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stop_program>
