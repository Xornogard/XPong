
XPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040f  00800060  00800060  000005e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001470  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ed  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2e  00000000  00000000  000025ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000311c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000631  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1a  00000000  00000000  00003a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000476b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
  8a:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enc_init>:

 uint8_t enc_value;

 void enc_init()
 {
	 ENC_PORT |= ENC_PIN_B;
  92:	92 9a       	sbi	0x12, 2	; 18
	 ENC_PORT |= ENC_PIN_A;
  94:	93 9a       	sbi	0x12, 3	; 18

	 GICR |= (1 << INT0); //Enable INT0
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
	 MCUCR |= (1 << ISC00);
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bf       	out	0x35, r24	; 53

	 sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <__vector_1>:
 }

ISR( INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	static uint8_t dir;

	if(!(ENC_PIN & ENC_PIN_B))
  b4:	82 99       	sbic	0x10, 2	; 16
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__vector_1+0x1c>
	{
		dir = (ENC_PIN & ENC_PIN_A);
  b8:	80 b3       	in	r24, 0x10	; 16
  ba:	88 70       	andi	r24, 0x08	; 8
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
  c0:	13 c0       	rjmp	.+38     	; 0xe8 <__vector_1+0x42>
	}
	else
	{
		if(dir != (ENC_PIN & ENC_PIN_A))
  c2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_end>
  c6:	80 b3       	in	r24, 0x10	; 16
  c8:	88 70       	andi	r24, 0x08	; 8
  ca:	89 17       	cp	r24, r25
  cc:	69 f0       	breq	.+26     	; 0xe8 <__vector_1+0x42>
		{
			if(dir)
  ce:	99 23       	and	r25, r25
  d0:	31 f0       	breq	.+12     	; 0xde <__vector_1+0x38>
			{
				enc_value++;
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_1+0x42>
			}
			else
			{
				enc_value--;
  de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
			}
		}
	}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <game_reset>:
	right_player_paddle.previous_position = right_player_paddle.position;
}

void game_draw_static_graphic()
{
	game_draw_borders();
  f6:	e8 e6       	ldi	r30, 0x68	; 104
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	82 83       	std	Z+2, r24	; 0x02
 106:	8e ef       	ldi	r24, 0xFE	; 254
 108:	83 83       	std	Z+3, r24	; 0x03
 10a:	8c e1       	ldi	r24, 0x1C	; 28
 10c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <left_player_paddle+0x1>
 110:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <right_player_paddle+0x1>
 114:	08 95       	ret

00000116 <game_update>:
 116:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ball>
 11a:	9f ed       	ldi	r25, 0xDF	; 223
 11c:	98 0f       	add	r25, r24
 11e:	9f 33       	cpi	r25, 0x3F	; 63
 120:	28 f0       	brcs	.+10     	; 0x12c <game_update+0x16>
 122:	e8 e6       	ldi	r30, 0x68	; 104
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	92 81       	ldd	r25, Z+2	; 0x02
 128:	91 95       	neg	r25
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 34       	cpi	r24, 0x41	; 65
 12e:	20 f0       	brcs	.+8      	; 0x138 <game_update+0x22>
 130:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ball+0x1>
 134:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <right_player_paddle+0x1>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <enc_value>
 13c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <left_player_paddle+0x1>
 140:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ball+0x1>
 144:	2d ef       	ldi	r18, 0xFD	; 253
 146:	29 0f       	add	r18, r25
 148:	2b 33       	cpi	r18, 0x3B	; 59
 14a:	28 f0       	brcs	.+10     	; 0x156 <game_update+0x40>
 14c:	e8 e6       	ldi	r30, 0x68	; 104
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	23 81       	ldd	r18, Z+3	; 0x03
 152:	21 95       	neg	r18
 154:	23 83       	std	Z+3, r18	; 0x03
 156:	e8 e6       	ldi	r30, 0x68	; 104
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	22 81       	ldd	r18, Z+2	; 0x02
 15c:	82 0f       	add	r24, r18
 15e:	80 83       	st	Z, r24
 160:	83 81       	ldd	r24, Z+3	; 0x03
 162:	98 0f       	add	r25, r24
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	08 95       	ret

00000168 <game_clear_ball>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	c8 e6       	ldi	r28, 0x68	; 104
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	69 81       	ldd	r22, Y+1	; 0x01
 172:	61 50       	subi	r22, 0x01	; 1
 174:	88 81       	ld	r24, Y
 176:	81 50       	subi	r24, 0x01	; 1
 178:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 17c:	88 81       	ld	r24, Y
 17e:	69 81       	ldd	r22, Y+1	; 0x01
 180:	81 50       	subi	r24, 0x01	; 1
 182:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 186:	69 81       	ldd	r22, Y+1	; 0x01
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	88 81       	ld	r24, Y
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	61 50       	subi	r22, 0x01	; 1
 196:	88 81       	ld	r24, Y
 198:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 19c:	69 81       	ldd	r22, Y+1	; 0x01
 19e:	88 81       	ld	r24, Y
 1a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 1a4:	69 81       	ldd	r22, Y+1	; 0x01
 1a6:	6f 5f       	subi	r22, 0xFF	; 255
 1a8:	88 81       	ld	r24, Y
 1aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 1ae:	69 81       	ldd	r22, Y+1	; 0x01
 1b0:	61 50       	subi	r22, 0x01	; 1
 1b2:	88 81       	ld	r24, Y
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 1ba:	88 81       	ld	r24, Y
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 1c4:	69 81       	ldd	r22, Y+1	; 0x01
 1c6:	6f 5f       	subi	r22, 0xFF	; 255
 1c8:	88 81       	ld	r24, Y
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <game_clear_paddles>:
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	0f 2e       	mov	r0, r31
 1e4:	f2 e6       	ldi	r31, 0x62	; 98
 1e6:	ef 2e       	mov	r14, r31
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ff 2e       	mov	r15, r31
 1ec:	f0 2d       	mov	r31, r0
 1ee:	05 e6       	ldi	r16, 0x65	; 101
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	f7 01       	movw	r30, r14
 1f4:	60 81       	ld	r22, Z
 1f6:	6c 0f       	add	r22, r28
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 1fe:	f8 01       	movw	r30, r16
 200:	60 81       	ld	r22, Z
 202:	6c 0f       	add	r22, r28
 204:	80 e6       	ldi	r24, 0x60	; 96
 206:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 20a:	f7 01       	movw	r30, r14
 20c:	60 81       	ld	r22, Z
 20e:	6c 0f       	add	r22, r28
 210:	81 e2       	ldi	r24, 0x21	; 33
 212:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 216:	f8 01       	movw	r30, r16
 218:	60 81       	ld	r22, Z
 21a:	6c 0f       	add	r22, r28
 21c:	8f e5       	ldi	r24, 0x5F	; 95
 21e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <glcd_clear_pixel>
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	c9 30       	cpi	r28, 0x09	; 9
 226:	29 f7       	brne	.-54     	; 0x1f2 <game_clear_paddles+0x1c>
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <game_draw_ball>:
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	c8 e6       	ldi	r28, 0x68	; 104
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	61 50       	subi	r22, 0x01	; 1
 240:	88 81       	ld	r24, Y
 242:	81 50       	subi	r24, 0x01	; 1
 244:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 248:	88 81       	ld	r24, Y
 24a:	69 81       	ldd	r22, Y+1	; 0x01
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 252:	69 81       	ldd	r22, Y+1	; 0x01
 254:	6f 5f       	subi	r22, 0xFF	; 255
 256:	88 81       	ld	r24, Y
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 25e:	69 81       	ldd	r22, Y+1	; 0x01
 260:	61 50       	subi	r22, 0x01	; 1
 262:	88 81       	ld	r24, Y
 264:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 268:	69 81       	ldd	r22, Y+1	; 0x01
 26a:	88 81       	ld	r24, Y
 26c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 270:	69 81       	ldd	r22, Y+1	; 0x01
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	88 81       	ld	r24, Y
 276:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 27a:	69 81       	ldd	r22, Y+1	; 0x01
 27c:	61 50       	subi	r22, 0x01	; 1
 27e:	88 81       	ld	r24, Y
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 286:	88 81       	ld	r24, Y
 288:	69 81       	ldd	r22, Y+1	; 0x01
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 290:	69 81       	ldd	r22, Y+1	; 0x01
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	88 81       	ld	r24, Y
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <game_draw_paddles>:
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f2 e6       	ldi	r31, 0x62	; 98
 2b2:	ef 2e       	mov	r14, r31
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ff 2e       	mov	r15, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	05 e6       	ldi	r16, 0x65	; 101
 2bc:	10 e0       	ldi	r17, 0x00	; 0
 2be:	f7 01       	movw	r30, r14
 2c0:	61 81       	ldd	r22, Z+1	; 0x01
 2c2:	6c 0f       	add	r22, r28
 2c4:	80 e2       	ldi	r24, 0x20	; 32
 2c6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 2ca:	f8 01       	movw	r30, r16
 2cc:	61 81       	ldd	r22, Z+1	; 0x01
 2ce:	6c 0f       	add	r22, r28
 2d0:	80 e6       	ldi	r24, 0x60	; 96
 2d2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 2d6:	f7 01       	movw	r30, r14
 2d8:	61 81       	ldd	r22, Z+1	; 0x01
 2da:	6c 0f       	add	r22, r28
 2dc:	81 e2       	ldi	r24, 0x21	; 33
 2de:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 2e2:	f8 01       	movw	r30, r16
 2e4:	61 81       	ldd	r22, Z+1	; 0x01
 2e6:	6c 0f       	add	r22, r28
 2e8:	8f e5       	ldi	r24, 0x5F	; 95
 2ea:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 2ee:	cf 5f       	subi	r28, 0xFF	; 255
 2f0:	c9 30       	cpi	r28, 0x09	; 9
 2f2:	29 f7       	brne	.-54     	; 0x2be <game_draw_paddles+0x1c>
 2f4:	e2 e6       	ldi	r30, 0x62	; 98
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	81 81       	ldd	r24, Z+1	; 0x01
 2fa:	80 83       	st	Z, r24
 2fc:	e5 e6       	ldi	r30, 0x65	; 101
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	81 81       	ldd	r24, Z+1	; 0x01
 302:	80 83       	st	Z, r24
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <game_loop>:
 310:	0e 94 b4 00 	call	0x168	; 0x168 <game_clear_ball>
 314:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <game_clear_paddles>
 318:	0e 94 8b 00 	call	0x116	; 0x116 <game_update>
 31c:	0e 94 1a 01 	call	0x234	; 0x234 <game_draw_ball>
 320:	0e 94 51 01 	call	0x2a2	; 0x2a2 <game_draw_paddles>
 324:	08 95       	ret

00000326 <game_draw_borders>:
 326:	cf 93       	push	r28
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	6c 2f       	mov	r22, r28
 32c:	8e e1       	ldi	r24, 0x1E	; 30
 32e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 332:	6c 2f       	mov	r22, r28
 334:	82 e6       	ldi	r24, 0x62	; 98
 336:	0e 94 54 02 	call	0x4a8	; 0x4a8 <glcd_set_pixel>
 33a:	cf 5f       	subi	r28, 0xFF	; 255
 33c:	c0 34       	cpi	r28, 0x40	; 64
 33e:	a9 f7       	brne	.-22     	; 0x32a <game_draw_borders+0x4>
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <game_init>:
///		PROCEDURES
//////////////////////////////////////////////////////////////////////////

void game_init() 
{
	game_reset();
 344:	0e 94 7b 00 	call	0xf6	; 0xf6 <game_reset>

	glcd_init();
 348:	0e 94 14 02 	call	0x428	; 0x428 <glcd_init>
	right_player_paddle.previous_position = right_player_paddle.position;
}

void game_draw_static_graphic()
{
	game_draw_borders();
 34c:	0e 94 93 01 	call	0x326	; 0x326 <game_draw_borders>
	game_reset();

	glcd_init();
	game_draw_static_graphic();

	enc_init();
 350:	0e 94 49 00 	call	0x92	; 0x92 <enc_init>
	enc_value = PADDLE_START_POSITION;
 354:	8c e1       	ldi	r24, 0x1C	; 28
 356:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
 35a:	08 95       	ret

0000035c <glcd_enable_controller>:
 void glcd_clear_all()
 {
	glcd_enable_mirroring_controllers();
	glcd_clear();
	glcd_enable_controller(0);
	clear_screen_data();
 35c:	88 23       	and	r24, r24
 35e:	31 f0       	breq	.+12     	; 0x36c <glcd_enable_controller+0x10>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <enabled_controller>
 366:	da 98       	cbi	0x1b, 2	; 27
 368:	db 9a       	sbi	0x1b, 3	; 27
 36a:	08 95       	ret
 36c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <enabled_controller>
 370:	db 98       	cbi	0x1b, 3	; 27
 372:	da 9a       	sbi	0x1b, 2	; 27
 374:	08 95       	ret

00000376 <glcd_command>:
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	94 bb       	out	0x14, r25	; 20
 37a:	d8 9a       	sbi	0x1b, 0	; 27
 37c:	9a e1       	ldi	r25, 0x1A	; 26
 37e:	9a 95       	dec	r25
 380:	f1 f7       	brne	.-4      	; 0x37e <glcd_command+0x8>
 382:	00 c0       	rjmp	.+0      	; 0x384 <glcd_command+0xe>
 384:	85 bb       	out	0x15, r24	; 21
 386:	d8 98       	cbi	0x1b, 0	; 27
 388:	85 e3       	ldi	r24, 0x35	; 53
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <glcd_command+0x14>
 38e:	00 00       	nop
 390:	08 95       	ret

00000392 <glcd_enable_mirroring_controllers>:
 392:	8b b3       	in	r24, 0x1b	; 27
 394:	83 7f       	andi	r24, 0xF3	; 243
 396:	8b bb       	out	0x1b, r24	; 27
 398:	08 95       	ret

0000039a <glcd_write_data>:
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
 39e:	d9 9a       	sbi	0x1b, 1	; 27
 3a0:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
 3a4:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <glcd_y>
 3a8:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <enabled_controller>
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	82 9f       	mul	r24, r18
 3b4:	f0 01       	movw	r30, r0
 3b6:	83 9f       	mul	r24, r19
 3b8:	f0 0d       	add	r31, r0
 3ba:	11 24       	eor	r1, r1
 3bc:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <glcd_x>
 3c0:	ee 0f       	add	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	e3 59       	subi	r30, 0x93	; 147
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	e9 0f       	add	r30, r25
 3d2:	f1 1d       	adc	r31, r1
 3d4:	c0 83       	st	Z, r28
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	8f 73       	andi	r24, 0x3F	; 63
 3da:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 3de:	d9 98       	cbi	0x1b, 1	; 27
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <glcd_clear>:
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	80 e4       	ldi	r24, 0x40	; 64
 3ec:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 3f0:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	81 2f       	mov	r24, r17
 3f8:	88 6b       	ori	r24, 0xB8	; 184
 3fa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 3fe:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
 402:	c0 e4       	ldi	r28, 0x40	; 64
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_write_data>
 40c:	21 97       	sbiw	r28, 0x01	; 1
 40e:	d9 f7       	brne	.-10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 410:	1f 5f       	subi	r17, 0xFF	; 255
 412:	18 30       	cpi	r17, 0x08	; 8
 414:	81 f7       	brne	.-32     	; 0x3f6 <glcd_clear+0x12>
 416:	88 eb       	ldi	r24, 0xB8	; 184
 418:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 41c:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	08 95       	ret

00000428 <glcd_init>:
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	84 bb       	out	0x14, r24	; 20
 42c:	8a b3       	in	r24, 0x1a	; 26
 42e:	8f 60       	ori	r24, 0x0F	; 15
 430:	8a bb       	out	0x1a, r24	; 26
 432:	0e 94 c9 01 	call	0x392	; 0x392 <glcd_enable_mirroring_controllers>
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
 43c:	80 ec       	ldi	r24, 0xC0	; 192
 43e:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
 442:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <glcd_clear>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 ae 01 	call	0x35c	; 0x35c <glcd_enable_controller>
 44c:	08 95       	ret

0000044e <glcd_set_y>:
//////////////////////////////////////////////////////////////////////////
////////COMMANDS
//////////////////////////////////////////////////////////////////////////

void glcd_set_y(uint8_t y)
{
 44e:	cf 93       	push	r28
 450:	c8 2f       	mov	r28, r24
	glcd_command(SET_Y(y));
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 458:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
	glcd_y = y;
 45c:	c0 93 6d 04 	sts	0x046D, r28	; 0x80046d <glcd_y>
}
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <glcd_set_x>:

void glcd_set_x(uint8_t x)
{
 464:	cf 93       	push	r28
 466:	c8 2f       	mov	r28, r24
	glcd_command(SET_X(x));
 468:	88 6b       	ori	r24, 0xB8	; 184
 46a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 46e:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_command>
	glcd_x = x;
 472:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <glcd_x>
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <glcd_set_cursor>:

	controller_port &= ~RS;
 }

 void glcd_set_cursor(uint8_t x, uint8_t y)
 {
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	c8 2f       	mov	r28, r24
 480:	d6 2f       	mov	r29, r22
	uint8_t row = y/BITS_IN_BYTE;
	uint8_t column = x % SINGLE_CONTROLLER_SCREEN_WIDTH;
	uint8_t controller = x/SINGLE_CONTROLLER_SCREEN_WIDTH;

	glcd_enable_controller(controller);
 482:	82 95       	swap	r24
 484:	86 95       	lsr	r24
 486:	86 95       	lsr	r24
 488:	83 70       	andi	r24, 0x03	; 3
 48a:	0e 94 ae 01 	call	0x35c	; 0x35c <glcd_enable_controller>
	glcd_set_x(row);
 48e:	8d 2f       	mov	r24, r29
 490:	86 95       	lsr	r24
 492:	86 95       	lsr	r24
 494:	86 95       	lsr	r24
 496:	0e 94 32 02 	call	0x464	; 0x464 <glcd_set_x>
	glcd_set_y(column);
 49a:	8c 2f       	mov	r24, r28
 49c:	8f 73       	andi	r24, 0x3F	; 63
 49e:	0e 94 27 02 	call	0x44e	; 0x44e <glcd_set_y>
 }
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <glcd_set_pixel>:

 void glcd_set_pixel(uint8_t x, uint8_t y)
 {
 4a8:	cf 93       	push	r28
 4aa:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 4ac:	0e 94 3d 02 	call	0x47a	; 0x47a <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] | 1 << pixel;
 4b0:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <enabled_controller>
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <glcd_y>
 4bc:	28 9f       	mul	r18, r24
 4be:	f0 01       	movw	r30, r0
 4c0:	29 9f       	mul	r18, r25
 4c2:	f0 0d       	add	r31, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <glcd_x>
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	e3 59       	subi	r30, 0x93	; 147
 4d8:	ff 4f       	sbci	r31, 0xFF	; 255
 4da:	e8 0f       	add	r30, r24
 4dc:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 4de:	c7 70       	andi	r28, 0x07	; 7
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <glcd_set_pixel+0x42>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	ca 95       	dec	r28
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <glcd_set_pixel+0x3e>
 4ee:	90 81       	ld	r25, Z
 4f0:	89 2b       	or	r24, r25
 4f2:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_write_data>
 }
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <glcd_clear_pixel>:

 void glcd_clear_pixel(uint8_t x, uint8_t y)
 {
 4fa:	cf 93       	push	r28
 4fc:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 4fe:	0e 94 3d 02 	call	0x47a	; 0x47a <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] & ~(1 << pixel);
 502:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <enabled_controller>
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <glcd_y>
 50e:	28 9f       	mul	r18, r24
 510:	f0 01       	movw	r30, r0
 512:	29 9f       	mul	r18, r25
 514:	f0 0d       	add	r31, r0
 516:	11 24       	eor	r1, r1
 518:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <glcd_x>
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	e3 59       	subi	r30, 0x93	; 147
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	e8 0f       	add	r30, r24
 52e:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 530:	c7 70       	andi	r28, 0x07	; 7
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <glcd_clear_pixel+0x42>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	ca 95       	dec	r28
 53e:	e2 f7       	brpl	.-8      	; 0x538 <glcd_clear_pixel+0x3e>
 540:	80 95       	com	r24
 542:	90 81       	ld	r25, Z
 544:	89 23       	and	r24, r25
 546:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_write_data>
 }
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <main>:
{
	
	uint8_t actual_controller = 0;
	uint8_t should_clear = 0;

	game_init();
 54e:	0e 94 a2 01 	call	0x344	; 0x344 <game_init>
    while (1) 
    {
		game_loop();
 552:	0e 94 88 01 	call	0x310	; 0x310 <game_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	85 ea       	ldi	r24, 0xA5	; 165
 55a:	9e e0       	ldi	r25, 0x0E	; 14
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <main+0xe>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x18>
 566:	00 00       	nop
 568:	f4 cf       	rjmp	.-24     	; 0x552 <main+0x4>

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
