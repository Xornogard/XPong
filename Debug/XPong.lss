
XPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000592  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040f  00800060  00800060  00000606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000149a  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b52  00000000  00000000  0000264a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6b  00000000  00000000  00003ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000484c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  8a:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enc_init>:

 int8_t enc_value;

 void enc_init()
 {
	 ENC_PORT |= ENC_PIN_B;
  92:	92 9a       	sbi	0x12, 2	; 18
	 ENC_PORT |= ENC_PIN_A;
  94:	93 9a       	sbi	0x12, 3	; 18

	 GICR |= ENC_INTERRUPT;
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	8b bf       	out	0x3b, r24	; 59
	 MCUCR |= (1 << ISC00);
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bf       	out	0x35, r24	; 53

	 sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <__vector_1>:
 }

ISR( INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	static uint8_t dir;

	if(!(ENC_PIN & ENC_PIN_B))
  b4:	82 99       	sbic	0x10, 2	; 16
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <__vector_1+0x1c>
	{
		dir = (ENC_PIN & ENC_PIN_A);
  b8:	80 b3       	in	r24, 0x10	; 16
  ba:	88 70       	andi	r24, 0x08	; 8
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
  c0:	13 c0       	rjmp	.+38     	; 0xe8 <__vector_1+0x42>
	}
	else
	{
		if(dir != (ENC_PIN & ENC_PIN_A))
  c2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_end>
  c6:	80 b3       	in	r24, 0x10	; 16
  c8:	88 70       	andi	r24, 0x08	; 8
  ca:	89 17       	cp	r24, r25
  cc:	69 f0       	breq	.+26     	; 0xe8 <__vector_1+0x42>
		{
			if(dir)
  ce:	99 23       	and	r25, r25
  d0:	31 f0       	breq	.+12     	; 0xde <__vector_1+0x38>
			{
				enc_value++;
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <__vector_1+0x42>
			}
			else
			{
				enc_value--;
  de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
			}
		}
	}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <game_reset>:
	right_player_paddle.previous_position = right_player_paddle.position;
}

void game_draw_static_graphic()
{
	game_draw_borders();
  f6:	e8 e6       	ldi	r30, 0x68	; 104
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	82 83       	std	Z+2, r24	; 0x02
 106:	8e ef       	ldi	r24, 0xFE	; 254
 108:	83 83       	std	Z+3, r24	; 0x03
 10a:	8c e1       	ldi	r24, 0x1C	; 28
 10c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <left_player_paddle+0x1>
 110:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <right_player_paddle+0x1>
 114:	08 95       	ret

00000116 <game_update>:
 116:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <ball>
 11a:	9f ed       	ldi	r25, 0xDF	; 223
 11c:	98 0f       	add	r25, r24
 11e:	9f 33       	cpi	r25, 0x3F	; 63
 120:	28 f0       	brcs	.+10     	; 0x12c <game_update+0x16>
 122:	e8 e6       	ldi	r30, 0x68	; 104
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	92 81       	ldd	r25, Z+2	; 0x02
 128:	91 95       	neg	r25
 12a:	92 83       	std	Z+2, r25	; 0x02
 12c:	81 34       	cpi	r24, 0x41	; 65
 12e:	20 f0       	brcs	.+8      	; 0x138 <game_update+0x22>
 130:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ball+0x1>
 134:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <right_player_paddle+0x1>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <enc_value>
 13c:	29 2f       	mov	r18, r25
 13e:	09 2e       	mov	r0, r25
 140:	00 0c       	add	r0, r0
 142:	33 0b       	sbc	r19, r19
 144:	27 5f       	subi	r18, 0xF7	; 247
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	21 34       	cpi	r18, 0x41	; 65
 14a:	31 05       	cpc	r19, r1
 14c:	24 f0       	brlt	.+8      	; 0x156 <game_update+0x40>
 14e:	97 e3       	ldi	r25, 0x37	; 55
 150:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <enc_value>
 154:	05 c0       	rjmp	.+10     	; 0x160 <game_update+0x4a>
 156:	99 23       	and	r25, r25
 158:	1c f4       	brge	.+6      	; 0x160 <game_update+0x4a>
 15a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <enc_value>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <left_player_paddle+0x1>
 164:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ball+0x1>
 168:	2d ef       	ldi	r18, 0xFD	; 253
 16a:	29 0f       	add	r18, r25
 16c:	2b 33       	cpi	r18, 0x3B	; 59
 16e:	28 f0       	brcs	.+10     	; 0x17a <game_update+0x64>
 170:	e8 e6       	ldi	r30, 0x68	; 104
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	23 81       	ldd	r18, Z+3	; 0x03
 176:	21 95       	neg	r18
 178:	23 83       	std	Z+3, r18	; 0x03
 17a:	e8 e6       	ldi	r30, 0x68	; 104
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	22 81       	ldd	r18, Z+2	; 0x02
 180:	82 0f       	add	r24, r18
 182:	80 83       	st	Z, r24
 184:	83 81       	ldd	r24, Z+3	; 0x03
 186:	98 0f       	add	r25, r24
 188:	91 83       	std	Z+1, r25	; 0x01
 18a:	08 95       	ret

0000018c <game_clear_ball>:
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	c8 e6       	ldi	r28, 0x68	; 104
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	69 81       	ldd	r22, Y+1	; 0x01
 196:	61 50       	subi	r22, 0x01	; 1
 198:	88 81       	ld	r24, Y
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1a0:	88 81       	ld	r24, Y
 1a2:	69 81       	ldd	r22, Y+1	; 0x01
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1aa:	69 81       	ldd	r22, Y+1	; 0x01
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	88 81       	ld	r24, Y
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1b6:	69 81       	ldd	r22, Y+1	; 0x01
 1b8:	61 50       	subi	r22, 0x01	; 1
 1ba:	88 81       	ld	r24, Y
 1bc:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1c0:	69 81       	ldd	r22, Y+1	; 0x01
 1c2:	88 81       	ld	r24, Y
 1c4:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1c8:	69 81       	ldd	r22, Y+1	; 0x01
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	88 81       	ld	r24, Y
 1ce:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1d2:	69 81       	ldd	r22, Y+1	; 0x01
 1d4:	61 50       	subi	r22, 0x01	; 1
 1d6:	88 81       	ld	r24, Y
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1de:	88 81       	ld	r24, Y
 1e0:	69 81       	ldd	r22, Y+1	; 0x01
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1e8:	69 81       	ldd	r22, Y+1	; 0x01
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	88 81       	ld	r24, Y
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <game_clear_paddles>:
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	0f 2e       	mov	r0, r31
 208:	f2 e6       	ldi	r31, 0x62	; 98
 20a:	ef 2e       	mov	r14, r31
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ff 2e       	mov	r15, r31
 210:	f0 2d       	mov	r31, r0
 212:	05 e6       	ldi	r16, 0x65	; 101
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	f7 01       	movw	r30, r14
 218:	60 81       	ld	r22, Z
 21a:	6c 0f       	add	r22, r28
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 222:	f8 01       	movw	r30, r16
 224:	60 81       	ld	r22, Z
 226:	6c 0f       	add	r22, r28
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 22e:	f7 01       	movw	r30, r14
 230:	60 81       	ld	r22, Z
 232:	6c 0f       	add	r22, r28
 234:	81 e2       	ldi	r24, 0x21	; 33
 236:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 23a:	f8 01       	movw	r30, r16
 23c:	60 81       	ld	r22, Z
 23e:	6c 0f       	add	r22, r28
 240:	8f e5       	ldi	r24, 0x5F	; 95
 242:	0e 94 8f 02 	call	0x51e	; 0x51e <glcd_clear_pixel>
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	c9 30       	cpi	r28, 0x09	; 9
 24a:	29 f7       	brne	.-54     	; 0x216 <game_clear_paddles+0x1c>
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	08 95       	ret

00000258 <game_draw_ball>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	c8 e6       	ldi	r28, 0x68	; 104
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	69 81       	ldd	r22, Y+1	; 0x01
 262:	61 50       	subi	r22, 0x01	; 1
 264:	88 81       	ld	r24, Y
 266:	81 50       	subi	r24, 0x01	; 1
 268:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 26c:	88 81       	ld	r24, Y
 26e:	69 81       	ldd	r22, Y+1	; 0x01
 270:	81 50       	subi	r24, 0x01	; 1
 272:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 276:	69 81       	ldd	r22, Y+1	; 0x01
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	88 81       	ld	r24, Y
 27c:	81 50       	subi	r24, 0x01	; 1
 27e:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 282:	69 81       	ldd	r22, Y+1	; 0x01
 284:	61 50       	subi	r22, 0x01	; 1
 286:	88 81       	ld	r24, Y
 288:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 28c:	69 81       	ldd	r22, Y+1	; 0x01
 28e:	88 81       	ld	r24, Y
 290:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 294:	69 81       	ldd	r22, Y+1	; 0x01
 296:	6f 5f       	subi	r22, 0xFF	; 255
 298:	88 81       	ld	r24, Y
 29a:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 29e:	69 81       	ldd	r22, Y+1	; 0x01
 2a0:	61 50       	subi	r22, 0x01	; 1
 2a2:	88 81       	ld	r24, Y
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 2aa:	88 81       	ld	r24, Y
 2ac:	69 81       	ldd	r22, Y+1	; 0x01
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 2b4:	69 81       	ldd	r22, Y+1	; 0x01
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	88 81       	ld	r24, Y
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <game_draw_paddles>:
 2c6:	ef 92       	push	r14
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
 2d2:	0f 2e       	mov	r0, r31
 2d4:	f2 e6       	ldi	r31, 0x62	; 98
 2d6:	ef 2e       	mov	r14, r31
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ff 2e       	mov	r15, r31
 2dc:	f0 2d       	mov	r31, r0
 2de:	05 e6       	ldi	r16, 0x65	; 101
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	f7 01       	movw	r30, r14
 2e4:	61 81       	ldd	r22, Z+1	; 0x01
 2e6:	6c 0f       	add	r22, r28
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 2ee:	f8 01       	movw	r30, r16
 2f0:	61 81       	ldd	r22, Z+1	; 0x01
 2f2:	6c 0f       	add	r22, r28
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 2fa:	f7 01       	movw	r30, r14
 2fc:	61 81       	ldd	r22, Z+1	; 0x01
 2fe:	6c 0f       	add	r22, r28
 300:	81 e2       	ldi	r24, 0x21	; 33
 302:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 306:	f8 01       	movw	r30, r16
 308:	61 81       	ldd	r22, Z+1	; 0x01
 30a:	6c 0f       	add	r22, r28
 30c:	8f e5       	ldi	r24, 0x5F	; 95
 30e:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 312:	cf 5f       	subi	r28, 0xFF	; 255
 314:	c9 30       	cpi	r28, 0x09	; 9
 316:	29 f7       	brne	.-54     	; 0x2e2 <game_draw_paddles+0x1c>
 318:	e2 e6       	ldi	r30, 0x62	; 98
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	81 81       	ldd	r24, Z+1	; 0x01
 31e:	80 83       	st	Z, r24
 320:	e5 e6       	ldi	r30, 0x65	; 101
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	81 81       	ldd	r24, Z+1	; 0x01
 326:	80 83       	st	Z, r24
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <game_loop>:
 334:	0e 94 c6 00 	call	0x18c	; 0x18c <game_clear_ball>
 338:	0e 94 fd 00 	call	0x1fa	; 0x1fa <game_clear_paddles>
 33c:	0e 94 8b 00 	call	0x116	; 0x116 <game_update>
 340:	0e 94 2c 01 	call	0x258	; 0x258 <game_draw_ball>
 344:	0e 94 63 01 	call	0x2c6	; 0x2c6 <game_draw_paddles>
 348:	08 95       	ret

0000034a <game_draw_borders>:
 34a:	cf 93       	push	r28
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	6c 2f       	mov	r22, r28
 350:	8e e1       	ldi	r24, 0x1E	; 30
 352:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 356:	6c 2f       	mov	r22, r28
 358:	82 e6       	ldi	r24, 0x62	; 98
 35a:	0e 94 66 02 	call	0x4cc	; 0x4cc <glcd_set_pixel>
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	c0 34       	cpi	r28, 0x40	; 64
 362:	a9 f7       	brne	.-22     	; 0x34e <game_draw_borders+0x4>
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <game_init>:
///		PROCEDURES
//////////////////////////////////////////////////////////////////////////

void game_init() 
{
	game_reset();
 368:	0e 94 7b 00 	call	0xf6	; 0xf6 <game_reset>

	glcd_init();
 36c:	0e 94 26 02 	call	0x44c	; 0x44c <glcd_init>
	right_player_paddle.previous_position = right_player_paddle.position;
}

void game_draw_static_graphic()
{
	game_draw_borders();
 370:	0e 94 a5 01 	call	0x34a	; 0x34a <game_draw_borders>
	game_reset();

	glcd_init();
	game_draw_static_graphic();

	enc_init();
 374:	0e 94 49 00 	call	0x92	; 0x92 <enc_init>
	enc_value = PADDLE_START_POSITION;
 378:	8c e1       	ldi	r24, 0x1C	; 28
 37a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
 37e:	08 95       	ret

00000380 <glcd_enable_controller>:
 void glcd_clear_all()
 {
	glcd_enable_mirroring_controllers();
	glcd_clear();
	glcd_enable_controller(0);
	clear_screen_data();
 380:	88 23       	and	r24, r24
 382:	31 f0       	breq	.+12     	; 0x390 <glcd_enable_controller+0x10>
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <enabled_controller>
 38a:	da 98       	cbi	0x1b, 2	; 27
 38c:	db 9a       	sbi	0x1b, 3	; 27
 38e:	08 95       	ret
 390:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <enabled_controller>
 394:	db 98       	cbi	0x1b, 3	; 27
 396:	da 9a       	sbi	0x1b, 2	; 27
 398:	08 95       	ret

0000039a <glcd_command>:
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	94 bb       	out	0x14, r25	; 20
 39e:	d8 9a       	sbi	0x1b, 0	; 27
 3a0:	9a e1       	ldi	r25, 0x1A	; 26
 3a2:	9a 95       	dec	r25
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <glcd_command+0x8>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <glcd_command+0xe>
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	d8 98       	cbi	0x1b, 0	; 27
 3ac:	8a e1       	ldi	r24, 0x1A	; 26
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <glcd_command+0x14>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <glcd_command+0x1a>
 3b4:	08 95       	ret

000003b6 <glcd_enable_mirroring_controllers>:
 3b6:	8b b3       	in	r24, 0x1b	; 27
 3b8:	83 7f       	andi	r24, 0xF3	; 243
 3ba:	8b bb       	out	0x1b, r24	; 27
 3bc:	08 95       	ret

000003be <glcd_write_data>:
 3be:	cf 93       	push	r28
 3c0:	c8 2f       	mov	r28, r24
 3c2:	d9 9a       	sbi	0x1b, 1	; 27
 3c4:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
 3c8:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <glcd_y>
 3cc:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <enabled_controller>
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	2f 5f       	subi	r18, 0xFF	; 255
 3d4:	3f 4f       	sbci	r19, 0xFF	; 255
 3d6:	82 9f       	mul	r24, r18
 3d8:	f0 01       	movw	r30, r0
 3da:	83 9f       	mul	r24, r19
 3dc:	f0 0d       	add	r31, r0
 3de:	11 24       	eor	r1, r1
 3e0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <glcd_x>
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e3 59       	subi	r30, 0x93	; 147
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	e9 0f       	add	r30, r25
 3f6:	f1 1d       	adc	r31, r1
 3f8:	c0 83       	st	Z, r28
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	8f 73       	andi	r24, 0x3F	; 63
 3fe:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 402:	d9 98       	cbi	0x1b, 1	; 27
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <glcd_clear>:
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	80 e4       	ldi	r24, 0x40	; 64
 410:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 414:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
 418:	10 e0       	ldi	r17, 0x00	; 0
 41a:	81 2f       	mov	r24, r17
 41c:	88 6b       	ori	r24, 0xB8	; 184
 41e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 422:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
 426:	c0 e4       	ldi	r28, 0x40	; 64
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 df 01 	call	0x3be	; 0x3be <glcd_write_data>
 430:	21 97       	sbiw	r28, 0x01	; 1
 432:	d9 f7       	brne	.-10     	; 0x42a <glcd_clear+0x22>
 434:	1f 5f       	subi	r17, 0xFF	; 255
 436:	18 30       	cpi	r17, 0x08	; 8
 438:	81 f7       	brne	.-32     	; 0x41a <glcd_clear+0x12>
 43a:	88 eb       	ldi	r24, 0xB8	; 184
 43c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 440:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	08 95       	ret

0000044c <glcd_init>:
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	84 bb       	out	0x14, r24	; 20
 450:	8a b3       	in	r24, 0x1a	; 26
 452:	8f 60       	ori	r24, 0x0F	; 15
 454:	8a bb       	out	0x1a, r24	; 26
 456:	0e 94 db 01 	call	0x3b6	; 0x3b6 <glcd_enable_mirroring_controllers>
 45a:	8f e3       	ldi	r24, 0x3F	; 63
 45c:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
 466:	0e 94 04 02 	call	0x408	; 0x408 <glcd_clear>
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 c0 01 	call	0x380	; 0x380 <glcd_enable_controller>
 470:	08 95       	ret

00000472 <glcd_set_y>:
//////////////////////////////////////////////////////////////////////////
////////COMMANDS
//////////////////////////////////////////////////////////////////////////

void glcd_set_y(uint8_t y)
{
 472:	cf 93       	push	r28
 474:	c8 2f       	mov	r28, r24
	glcd_command(SET_Y(y));
 476:	80 64       	ori	r24, 0x40	; 64
 478:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <glcd_y>
 47c:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
	glcd_y = y;
 480:	c0 93 6d 04 	sts	0x046D, r28	; 0x80046d <glcd_y>
}
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <glcd_set_x>:

void glcd_set_x(uint8_t x)
{
 488:	cf 93       	push	r28
 48a:	c8 2f       	mov	r28, r24
	glcd_command(SET_X(x));
 48c:	88 6b       	ori	r24, 0xB8	; 184
 48e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <glcd_x>
 492:	0e 94 cd 01 	call	0x39a	; 0x39a <glcd_command>
	glcd_x = x;
 496:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <glcd_x>
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <glcd_set_cursor>:

	controller_port &= ~RS;
 }

 void glcd_set_cursor(uint8_t x, uint8_t y)
 {
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	c8 2f       	mov	r28, r24
 4a4:	d6 2f       	mov	r29, r22
	uint8_t row = y/BITS_IN_BYTE;
	uint8_t column = x % SINGLE_CONTROLLER_SCREEN_WIDTH;
	uint8_t controller = x/SINGLE_CONTROLLER_SCREEN_WIDTH;

	glcd_enable_controller(controller);
 4a6:	82 95       	swap	r24
 4a8:	86 95       	lsr	r24
 4aa:	86 95       	lsr	r24
 4ac:	83 70       	andi	r24, 0x03	; 3
 4ae:	0e 94 c0 01 	call	0x380	; 0x380 <glcd_enable_controller>
	glcd_set_x(row);
 4b2:	8d 2f       	mov	r24, r29
 4b4:	86 95       	lsr	r24
 4b6:	86 95       	lsr	r24
 4b8:	86 95       	lsr	r24
 4ba:	0e 94 44 02 	call	0x488	; 0x488 <glcd_set_x>
	glcd_set_y(column);
 4be:	8c 2f       	mov	r24, r28
 4c0:	8f 73       	andi	r24, 0x3F	; 63
 4c2:	0e 94 39 02 	call	0x472	; 0x472 <glcd_set_y>
 }
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <glcd_set_pixel>:

 void glcd_set_pixel(uint8_t x, uint8_t y)
 {
 4cc:	cf 93       	push	r28
 4ce:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 4d0:	0e 94 4f 02 	call	0x49e	; 0x49e <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] | 1 << pixel;
 4d4:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <enabled_controller>
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <glcd_y>
 4e0:	28 9f       	mul	r18, r24
 4e2:	f0 01       	movw	r30, r0
 4e4:	29 9f       	mul	r18, r25
 4e6:	f0 0d       	add	r31, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <glcd_x>
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	e3 59       	subi	r30, 0x93	; 147
 4fc:	ff 4f       	sbci	r31, 0xFF	; 255
 4fe:	e8 0f       	add	r30, r24
 500:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 502:	c7 70       	andi	r28, 0x07	; 7
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <glcd_set_pixel+0x42>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	ca 95       	dec	r28
 510:	e2 f7       	brpl	.-8      	; 0x50a <glcd_set_pixel+0x3e>
 512:	90 81       	ld	r25, Z
 514:	89 2b       	or	r24, r25
 516:	0e 94 df 01 	call	0x3be	; 0x3be <glcd_write_data>
 }
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <glcd_clear_pixel>:

 void glcd_clear_pixel(uint8_t x, uint8_t y)
 {
 51e:	cf 93       	push	r28
 520:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 522:	0e 94 4f 02 	call	0x49e	; 0x49e <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] & ~(1 << pixel);
 526:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <enabled_controller>
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <glcd_y>
 532:	28 9f       	mul	r18, r24
 534:	f0 01       	movw	r30, r0
 536:	29 9f       	mul	r18, r25
 538:	f0 0d       	add	r31, r0
 53a:	11 24       	eor	r1, r1
 53c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <glcd_x>
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	e3 59       	subi	r30, 0x93	; 147
 54e:	ff 4f       	sbci	r31, 0xFF	; 255
 550:	e8 0f       	add	r30, r24
 552:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 554:	c7 70       	andi	r28, 0x07	; 7
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <glcd_clear_pixel+0x42>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	ca 95       	dec	r28
 562:	e2 f7       	brpl	.-8      	; 0x55c <glcd_clear_pixel+0x3e>
 564:	80 95       	com	r24
 566:	90 81       	ld	r25, Z
 568:	89 23       	and	r24, r25
 56a:	0e 94 df 01 	call	0x3be	; 0x3be <glcd_write_data>
 }
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <main>:
{
	
	uint8_t actual_controller = 0;
	uint8_t should_clear = 0;

	game_init();
 572:	0e 94 b4 01 	call	0x368	; 0x368 <game_init>
    while (1) 
    {
		game_loop();
 576:	0e 94 9a 01 	call	0x334	; 0x334 <game_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 57a:	2f ef       	ldi	r18, 0xFF	; 255
 57c:	85 ea       	ldi	r24, 0xA5	; 165
 57e:	9e e0       	ldi	r25, 0x0E	; 14
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <main+0xe>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0x18>
 58a:	00 00       	nop
 58c:	f4 cf       	rjmp	.-24     	; 0x576 <main+0x4>

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
