
XPong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040b  00800060  00800060  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c7  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c6  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b5  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4e  00000000  00000000  00003141  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  8a:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <game_reset>:
	game_reset();
}

void game_reset()
{
	ball.pos_x = SCREEN_WIDTH/2;
  92:	e4 e6       	ldi	r30, 0x64	; 100
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ball.pos_y = SCREEN_HEIGHT/2;
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	81 83       	std	Z+1, r24	; 0x01
	ball.speed_x = 2;
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	82 83       	std	Z+2, r24	; 0x02
	ball.speed_y = 2;
  a2:	83 83       	std	Z+3, r24	; 0x03
  a4:	08 95       	ret

000000a6 <game_init>:
///		PROCEDURES
//////////////////////////////////////////////////////////////////////////

void game_init() 
{
	glcd_init();
  a6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <glcd_init>
	game_reset();
  aa:	0e 94 49 00 	call	0x92	; 0x92 <game_reset>
  ae:	08 95       	ret

000000b0 <game_update>:
	game_draw_paddles();
}

void game_update()
{
	if(ball.pos_x <= 2 || ball.pos_x >= 126)
  b0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <ball>
  b4:	8d ef       	ldi	r24, 0xFD	; 253
  b6:	89 0f       	add	r24, r25
  b8:	8b 37       	cpi	r24, 0x7B	; 123
  ba:	28 f0       	brcs	.+10     	; 0xc6 <game_update+0x16>
		ball.speed_x = -ball.speed_x;
  bc:	e4 e6       	ldi	r30, 0x64	; 100
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	82 81       	ldd	r24, Z+2	; 0x02
  c2:	81 95       	neg	r24
  c4:	82 83       	std	Z+2, r24	; 0x02

	if(ball.pos_y <= 2 || ball.pos_y >= 62)
  c6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ball+0x1>
  ca:	2d ef       	ldi	r18, 0xFD	; 253
  cc:	28 0f       	add	r18, r24
  ce:	2b 33       	cpi	r18, 0x3B	; 59
  d0:	28 f0       	brcs	.+10     	; 0xdc <game_update+0x2c>
		ball.speed_y = -ball.speed_y;
  d2:	e4 e6       	ldi	r30, 0x64	; 100
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	23 81       	ldd	r18, Z+3	; 0x03
  d8:	21 95       	neg	r18
  da:	23 83       	std	Z+3, r18	; 0x03

	ball.pos_x += ball.speed_x;
  dc:	e4 e6       	ldi	r30, 0x64	; 100
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	22 81       	ldd	r18, Z+2	; 0x02
  e2:	92 0f       	add	r25, r18
  e4:	90 83       	st	Z, r25
	ball.pos_y += ball.speed_y;
  e6:	93 81       	ldd	r25, Z+3	; 0x03
  e8:	89 0f       	add	r24, r25
  ea:	81 83       	std	Z+1, r24	; 0x01
  ec:	08 95       	ret

000000ee <game_clear_ball>:
}

void game_clear_ball()
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
	glcd_clear_pixel(ball.pos_x-1, ball.pos_y-1);
  f2:	c4 e6       	ldi	r28, 0x64	; 100
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	69 81       	ldd	r22, Y+1	; 0x01
  f8:	61 50       	subi	r22, 0x01	; 1
  fa:	88 81       	ld	r24, Y
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
	glcd_clear_pixel(ball.pos_x-1, ball.pos_y);
 102:	88 81       	ld	r24, Y
 104:	69 81       	ldd	r22, Y+1	; 0x01
 106:	81 50       	subi	r24, 0x01	; 1
 108:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
	glcd_clear_pixel(ball.pos_x-1, ball.pos_y+1);
 10c:	69 81       	ldd	r22, Y+1	; 0x01
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	88 81       	ld	r24, Y
 112:	81 50       	subi	r24, 0x01	; 1
 114:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>

	glcd_clear_pixel(ball.pos_x, ball.pos_y-1);
 118:	69 81       	ldd	r22, Y+1	; 0x01
 11a:	61 50       	subi	r22, 0x01	; 1
 11c:	88 81       	ld	r24, Y
 11e:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
	glcd_clear_pixel(ball.pos_x, ball.pos_y);
 122:	69 81       	ldd	r22, Y+1	; 0x01
 124:	88 81       	ld	r24, Y
 126:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
	glcd_clear_pixel(ball.pos_x, ball.pos_y+1);
 12a:	69 81       	ldd	r22, Y+1	; 0x01
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	88 81       	ld	r24, Y
 130:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>

	glcd_clear_pixel(ball.pos_x+1, ball.pos_y-1);
 134:	69 81       	ldd	r22, Y+1	; 0x01
 136:	61 50       	subi	r22, 0x01	; 1
 138:	88 81       	ld	r24, Y
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
	glcd_clear_pixel(ball.pos_x+1, ball.pos_y);
 140:	88 81       	ld	r24, Y
 142:	69 81       	ldd	r22, Y+1	; 0x01
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
	glcd_clear_pixel(ball.pos_x+1, ball.pos_y+1);
 14a:	69 81       	ldd	r22, Y+1	; 0x01
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	88 81       	ld	r24, Y
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	0e 94 bb 01 	call	0x376	; 0x376 <glcd_clear_pixel>
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <game_draw_ball>:

void game_draw_ball()
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	glcd_set_pixel(ball.pos_x-1, ball.pos_y-1);
 160:	c4 e6       	ldi	r28, 0x64	; 100
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	69 81       	ldd	r22, Y+1	; 0x01
 166:	61 50       	subi	r22, 0x01	; 1
 168:	88 81       	ld	r24, Y
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
	glcd_set_pixel(ball.pos_x-1, ball.pos_y);
 170:	88 81       	ld	r24, Y
 172:	69 81       	ldd	r22, Y+1	; 0x01
 174:	81 50       	subi	r24, 0x01	; 1
 176:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
	glcd_set_pixel(ball.pos_x-1, ball.pos_y+1);
 17a:	69 81       	ldd	r22, Y+1	; 0x01
 17c:	6f 5f       	subi	r22, 0xFF	; 255
 17e:	88 81       	ld	r24, Y
 180:	81 50       	subi	r24, 0x01	; 1
 182:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>

	glcd_set_pixel(ball.pos_x, ball.pos_y-1);
 186:	69 81       	ldd	r22, Y+1	; 0x01
 188:	61 50       	subi	r22, 0x01	; 1
 18a:	88 81       	ld	r24, Y
 18c:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
	glcd_set_pixel(ball.pos_x, ball.pos_y);
 190:	69 81       	ldd	r22, Y+1	; 0x01
 192:	88 81       	ld	r24, Y
 194:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
	glcd_set_pixel(ball.pos_x, ball.pos_y+1);
 198:	69 81       	ldd	r22, Y+1	; 0x01
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	88 81       	ld	r24, Y
 19e:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>

	glcd_set_pixel(ball.pos_x+1, ball.pos_y-1);
 1a2:	69 81       	ldd	r22, Y+1	; 0x01
 1a4:	61 50       	subi	r22, 0x01	; 1
 1a6:	88 81       	ld	r24, Y
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
	glcd_set_pixel(ball.pos_x+1, ball.pos_y);
 1ae:	88 81       	ld	r24, Y
 1b0:	69 81       	ldd	r22, Y+1	; 0x01
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
	glcd_set_pixel(ball.pos_x+1, ball.pos_y+1);
 1b8:	69 81       	ldd	r22, Y+1	; 0x01
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	88 81       	ld	r24, Y
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	0e 94 92 01 	call	0x324	; 0x324 <glcd_set_pixel>
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <game_loop>:
	ball.speed_y = 2;
}

void game_loop()
{
	game_clear_ball();
 1ca:	0e 94 77 00 	call	0xee	; 0xee <game_clear_ball>
	game_update();
 1ce:	0e 94 58 00 	call	0xb0	; 0xb0 <game_update>
	game_draw_ball();
 1d2:	0e 94 ae 00 	call	0x15c	; 0x15c <game_draw_ball>
 1d6:	08 95       	ret

000001d8 <glcd_enable_controller>:
 void glcd_clear_all()
 {
	glcd_enable_mirroring_controllers();
	glcd_clear();
	glcd_enable_controller(0);
	clear_screen_data();
 1d8:	88 23       	and	r24, r24
 1da:	31 f0       	breq	.+12     	; 0x1e8 <glcd_enable_controller+0x10>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <enabled_controller>
 1e2:	da 98       	cbi	0x1b, 2	; 27
 1e4:	db 9a       	sbi	0x1b, 3	; 27
 1e6:	08 95       	ret
 1e8:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <enabled_controller>
 1ec:	db 98       	cbi	0x1b, 3	; 27
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret

000001f2 <glcd_command>:
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
 1f4:	94 bb       	out	0x14, r25	; 20
 1f6:	d8 9a       	sbi	0x1b, 0	; 27
 1f8:	9a e1       	ldi	r25, 0x1A	; 26
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <glcd_command+0x8>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <glcd_command+0xe>
 200:	85 bb       	out	0x15, r24	; 21
 202:	d8 98       	cbi	0x1b, 0	; 27
 204:	85 e3       	ldi	r24, 0x35	; 53
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <glcd_command+0x14>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <glcd_enable_mirroring_controllers>:
 20e:	8b b3       	in	r24, 0x1b	; 27
 210:	83 7f       	andi	r24, 0xF3	; 243
 212:	8b bb       	out	0x1b, r24	; 27
 214:	08 95       	ret

00000216 <glcd_write_data>:
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
 21a:	d9 9a       	sbi	0x1b, 1	; 27
 21c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
 220:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <glcd_y>
 224:	20 91 6a 04 	lds	r18, 0x046A	; 0x80046a <enabled_controller>
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
 22e:	82 9f       	mul	r24, r18
 230:	f0 01       	movw	r30, r0
 232:	83 9f       	mul	r24, r19
 234:	f0 0d       	add	r31, r0
 236:	11 24       	eor	r1, r1
 238:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <glcd_x>
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e7 59       	subi	r30, 0x97	; 151
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	e9 0f       	add	r30, r25
 24e:	f1 1d       	adc	r31, r1
 250:	c0 83       	st	Z, r28
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	8f 73       	andi	r24, 0x3F	; 63
 256:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <glcd_y>
 25a:	d9 98       	cbi	0x1b, 1	; 27
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <glcd_clear>:
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <glcd_y>
 26c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	81 2f       	mov	r24, r17
 274:	88 6b       	ori	r24, 0xB8	; 184
 276:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <glcd_x>
 27a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
 27e:	c0 e4       	ldi	r28, 0x40	; 64
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 0b 01 	call	0x216	; 0x216 <glcd_write_data>
 288:	21 97       	sbiw	r28, 0x01	; 1
 28a:	d9 f7       	brne	.-10     	; 0x282 <glcd_clear+0x22>
 28c:	1f 5f       	subi	r17, 0xFF	; 255
 28e:	18 30       	cpi	r17, 0x08	; 8
 290:	81 f7       	brne	.-32     	; 0x272 <glcd_clear+0x12>
 292:	88 eb       	ldi	r24, 0xB8	; 184
 294:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <glcd_x>
 298:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <glcd_init>:
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	84 bb       	out	0x14, r24	; 20
 2a8:	8a b3       	in	r24, 0x1a	; 26
 2aa:	8f 60       	ori	r24, 0x0F	; 15
 2ac:	8a bb       	out	0x1a, r24	; 26
 2ae:	0e 94 07 01 	call	0x20e	; 0x20e <glcd_enable_mirroring_controllers>
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
 2b8:	80 ec       	ldi	r24, 0xC0	; 192
 2ba:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
 2be:	0e 94 30 01 	call	0x260	; 0x260 <glcd_clear>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <glcd_enable_controller>
 2c8:	08 95       	ret

000002ca <glcd_set_y>:
//////////////////////////////////////////////////////////////////////////
////////COMMANDS
//////////////////////////////////////////////////////////////////////////

void glcd_set_y(uint8_t y)
{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
	glcd_command(SET_Y(y));
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <glcd_y>
 2d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
	glcd_y = y;
 2d8:	c0 93 69 04 	sts	0x0469, r28	; 0x800469 <glcd_y>
}
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <glcd_set_x>:

void glcd_set_x(uint8_t x)
{
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
	glcd_command(SET_X(x));
 2e4:	88 6b       	ori	r24, 0xB8	; 184
 2e6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <glcd_x>
 2ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <glcd_command>
	glcd_x = x;
 2ee:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <glcd_x>
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <glcd_set_cursor>:

	controller_port &= ~RS;
 }

 void glcd_set_cursor(uint8_t x, uint8_t y)
 {
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	c8 2f       	mov	r28, r24
 2fc:	d6 2f       	mov	r29, r22
	uint8_t row = y/BITS_IN_BYTE;
	uint8_t column = x % SINGLE_CONTROLLER_SCREEN_WIDTH;
	uint8_t controller = x/SINGLE_CONTROLLER_SCREEN_WIDTH;

	glcd_enable_controller(controller);
 2fe:	82 95       	swap	r24
 300:	86 95       	lsr	r24
 302:	86 95       	lsr	r24
 304:	83 70       	andi	r24, 0x03	; 3
 306:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <glcd_enable_controller>
	glcd_set_x(row);
 30a:	8d 2f       	mov	r24, r29
 30c:	86 95       	lsr	r24
 30e:	86 95       	lsr	r24
 310:	86 95       	lsr	r24
 312:	0e 94 70 01 	call	0x2e0	; 0x2e0 <glcd_set_x>
	glcd_set_y(column);
 316:	8c 2f       	mov	r24, r28
 318:	8f 73       	andi	r24, 0x3F	; 63
 31a:	0e 94 65 01 	call	0x2ca	; 0x2ca <glcd_set_y>
 }
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <glcd_set_pixel>:

 void glcd_set_pixel(uint8_t x, uint8_t y)
 {
 324:	cf 93       	push	r28
 326:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 328:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] | 1 << pixel;
 32c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <enabled_controller>
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <glcd_y>
 338:	28 9f       	mul	r18, r24
 33a:	f0 01       	movw	r30, r0
 33c:	29 9f       	mul	r18, r25
 33e:	f0 0d       	add	r31, r0
 340:	11 24       	eor	r1, r1
 342:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <glcd_x>
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	e7 59       	subi	r30, 0x97	; 151
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	e8 0f       	add	r30, r24
 358:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 35a:	c7 70       	andi	r28, 0x07	; 7
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <glcd_set_pixel+0x42>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	ca 95       	dec	r28
 368:	e2 f7       	brpl	.-8      	; 0x362 <glcd_set_pixel+0x3e>
 36a:	90 81       	ld	r25, Z
 36c:	89 2b       	or	r24, r25
 36e:	0e 94 0b 01 	call	0x216	; 0x216 <glcd_write_data>
 }
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <glcd_clear_pixel>:

 void glcd_clear_pixel(uint8_t x, uint8_t y)
 {
 376:	cf 93       	push	r28
 378:	c6 2f       	mov	r28, r22
	uint8_t pixel = y%BITS_IN_BYTE;
	glcd_set_cursor(x,y);
 37a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <glcd_set_cursor>

	uint8_t page_state = screen_data[glcd_y*(1+enabled_controller)][glcd_x] & ~(1 << pixel);
 37e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <enabled_controller>
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <glcd_y>
 38a:	28 9f       	mul	r18, r24
 38c:	f0 01       	movw	r30, r0
 38e:	29 9f       	mul	r18, r25
 390:	f0 0d       	add	r31, r0
 392:	11 24       	eor	r1, r1
 394:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <glcd_x>
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	e7 59       	subi	r30, 0x97	; 151
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	e8 0f       	add	r30, r24
 3aa:	f1 1d       	adc	r31, r1

	glcd_write_data(page_state);
 3ac:	c7 70       	andi	r28, 0x07	; 7
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <glcd_clear_pixel+0x42>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	ca 95       	dec	r28
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <glcd_clear_pixel+0x3e>
 3bc:	80 95       	com	r24
 3be:	90 81       	ld	r25, Z
 3c0:	89 23       	and	r24, r25
 3c2:	0e 94 0b 01 	call	0x216	; 0x216 <glcd_write_data>
 }
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <main>:
{
	
	uint8_t actual_controller = 0;
	uint8_t should_clear = 0;

	game_init();
 3ca:	0e 94 53 00 	call	0xa6	; 0xa6 <game_init>
    while (1) 
    {
		game_loop();
 3ce:	0e 94 e5 00 	call	0x1ca	; 0x1ca <game_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	85 ea       	ldi	r24, 0xA5	; 165
 3d6:	9e e0       	ldi	r25, 0x0E	; 14
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0xe>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x18>
 3e2:	00 00       	nop
 3e4:	f4 cf       	rjmp	.-24     	; 0x3ce <main+0x4>

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
